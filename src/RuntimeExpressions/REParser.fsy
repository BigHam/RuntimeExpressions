%{
open RuntimeExpressionTree
%}

%token <string> ID //identifier
%token <string> LITERAL
%token <decimal> NUM
%token <int64> LONG
%token TRUE FALSE ASSIGN
%token OPENBRACKET CLOSINGBRACKET ENDSTATEMENT COMMA
%token OPAND OPOR EQ NE LT GT LTE GTE PLUS MINUS MULT DIV
%token EQUALS
%token EOF
%left EQUALS
%left OPAND OPOR
%left EQ NE LT GT LTE GTE 
%left PLUS MINUS
%left MULT DIV

%nonassoc UMINUS //uniary minus

//start
%start start
%type <RuntimeExpressionTree.expr> start

%%

start: statement 
       EOF { $1 }

statement:
	| ID EQUALS expression { expr.Assignment($1, $3) }
	| expression { expr.Expression($1) }	

expression_list:
    | expression { [$1] }
    | expression COMMA expression_list { $1::$3 }

expression:
        | NUM		{ Num($1) }
		| LONG		{ Long($1) }
        | ID		{ Id($1) }
		| TRUE		{ Long(1L) }
		| FALSE		{ Long(0L) }
		| LITERAL   { Literal($1) }
        | MINUS expression %prec UMINUS { BinaryExpression(Num(1m - 2m), Mult, $2) }
        | expression MULT expression { BinaryExpression($1, Mult, $3) }
		| expression DIV expression { BinaryExpression($1, Div, $3) }
		| expression PLUS expression { BinaryExpression($1, Plus, $3) }
		| expression MINUS expression { BinaryExpression($1, Minus, $3) }
		| expression EQ expression { BinaryExpression($1, Eq, $3) }
		| expression NE expression { BinaryExpression($1, Ne, $3) }
		| expression LT expression { BinaryExpression($1, Lt, $3) }
		| expression GT expression { BinaryExpression($1, Gt, $3) }
		| expression LTE expression { BinaryExpression($1, Lte, $3) }
		| expression GTE expression { BinaryExpression($1, Gte, $3) }
		| expression OPAND expression { BinaryExpression($1, OpAnd, $3) }
		| expression OPOR expression { BinaryExpression($1, OpOr, $3) }		
        | OPENBRACKET expression CLOSINGBRACKET { $2 }          
		| ID OPENBRACKET expression_list CLOSINGBRACKET { Invoc($1, $3) }
		
