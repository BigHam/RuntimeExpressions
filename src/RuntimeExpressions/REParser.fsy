%{
open RuntimeExpressionTree
%}

%token <string> ID //identifier
%token <string> LITERAL
%token <decimal> NUM
%token <int64> LONG
%token PLUS MINUS MULT DIV ASSIGN EQ NE LT GT LTE GTE OPAND OPOR
%token TRUE FALSE
%token OPENBRACKET CLOSINGBRACKET ENDSTATEMENT COMMA
%token EOF
%left ID
%left EQ NE LT GT LTE GTE OPAND OPOR
%left PLUS MINUS
%left MULT DIV
%left OPENBRACKET

%nonassoc UMINUS //uniary minus

//start
%start start
%type <RuntimeExpressionTree.expr> start

%%

start: expression 
       EOF { $1 }

expression_list:
    | expression { [$1] }
    | expression COMMA expression_list { $1::$3 }

expression:
        | NUM		{ Num($1) }
		| LONG		{ Long($1) }
        | ID		{ Id($1) }
		| TRUE		{ Long(1L) }
		| FALSE		{ Long(0L) }
		| LITERAL   { Literal($1) }
        | MINUS expression %prec UMINUS { BinaryExpression(Num(1m - 2m), Mult, $2) }
        | expression op expression { BinaryExpression($1, $2, $3) }
        | OPENBRACKET expression CLOSINGBRACKET { $2 }          
		| ID OPENBRACKET expression_list CLOSINGBRACKET { Invoc($1, $3) }

op: 
    | MULT {Mult} 
    | DIV {Div} 
    | PLUS {Plus} 
    | MINUS {Minus} 
    | EQ  {Eq}
    | NE  {Ne}
    | LT  {Lt}
    | GT  {Gt}
    | LTE {Lte}
    | GTE {Gte}
	| OPAND {OpAnd}
	| OPOR  {OpOr}
